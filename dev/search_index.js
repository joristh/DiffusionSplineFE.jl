var documenterSearchIndex = {"docs":
[{"location":"details/","page":"Details","title":"Details","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"details/#Interface","page":"Details","title":"Interface","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"SplineComplex\ninitial_coefficients\nDiffusionProblem\nGeneralDiffusionProblem","category":"page"},{"location":"details/#DiffusionSplineFE.SplineComplex","page":"Details","title":"DiffusionSplineFE.SplineComplex","text":"SplineComplex{T}\n\n1D B-Spline bases and collocation matrices\n\nInitialization\n\nBy knot sequence or domain interval and number of points\n\nSplineComplex(knots::Vector{T}, order::Int=4)\nSplineComplex(domain::Tuple=(-1.0, 1.0), n::Int=11, order::Int=4)\n\nFields\n\nB: Spline basis\nR: Recombined spline basis (satisfying Neumann boundary condition)\nξ: Greville points \nI₁: Collocation matrix of R\nI₂: Collocation matrix of B\n\n\n\n\n\n","category":"type"},{"location":"details/#DiffusionSplineFE.initial_coefficients","page":"Details","title":"DiffusionSplineFE.initial_coefficients","text":"initial_coefficients(SC::SplineComplex, f::Function)\n\nCompute coefficient vector of initial condition in recombined spline space R.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE.DiffusionProblem","page":"Details","title":"DiffusionSplineFE.DiffusionProblem","text":"DiffusionProblem(SC::SplineComplex, C::Function, D::Function, S::Function, u0::Vector, tspan::Tuple)\n\nSet up OrdinaryDiffEq.ODEProblem for equation with only space-dependent capacity C, diffusion D, and source S.\n\nAlternative initialization with u0::Function instead of u0::Vector.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE.GeneralDiffusionProblem","page":"Details","title":"DiffusionSplineFE.GeneralDiffusionProblem","text":"DiffusionProblem(SC::SplineComplex, C::Function, D::Function, S::Function, u0::Vector, tspan::Tuple)\n\nSet up OrdinaryDiffEq.ODEProblem for equation with space- and value-dependent diffusion D, and source S.\n\nAlternative initialization with u0::Function instead of u0::Vector.\n\n\n\n\n\n","category":"function"},{"location":"details/#Internals","page":"Details","title":"Internals","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"_approximate_nonlinear\n_approximate_nonlinear!\n_assemble_tensors","category":"page"},{"location":"details/#DiffusionSplineFE._approximate_nonlinear","page":"Details","title":"DiffusionSplineFE._approximate_nonlinear","text":"_approximate_nonlinear(SC::SplineComplex, f, a)\n\nReturn coefficients for approximation of nonlinear function f(x, Tₕ(a)) in spline space B.\n\nThe approximation is based on interpolation at the Greville points.\n\n\n\n\n\n_approximate_nonlinear(f, SC::SplineComplex)\n\nReturn coefficients for approximation of space-dependent function f(x) in spline space B.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE._approximate_nonlinear!","page":"Details","title":"DiffusionSplineFE._approximate_nonlinear!","text":"_approximate_nonlinear!(d, SC::SplineComplex, f, a)\n\nFill preallocated coefficient vector, see also _approximate_nonlinear.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE._assemble_tensors","page":"Details","title":"DiffusionSplineFE._assemble_tensors","text":"_assemble_tensors(SC::SplineComplex)\n\nHelper function to compute all needed Galerkin tensors and matrices.\n\n\n\n\n\n","category":"function"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"examples/#Ghil-Sellers-Energy-Balance-Model","page":"Advanced Example","title":"Ghil-Sellers Energy Balance Model","text":"","category":"section"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"The entire code for this example can be found as a jupyter-notebook.","category":"page"},{"location":"examples/#Model","page":"Advanced Example","title":"Model","text":"","category":"section"},{"location":"examples/#Results","page":"Advanced Example","title":"Results","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"#DiffusionSplineFE","page":"Home","title":"DiffusionSplineFE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DiffusionSplineFE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We are looking at the 1D nonlinear diffusion equation on the interval domain Omega = a b","category":"page"},{"location":"","page":"Home","title":"Home","text":"C(x)fracpartial Tpartial t = fracpartialpartial x left( D(x T) fracpartial Tpartial xright) + S(xT) quad x in Omega T in mathbbR","category":"page"},{"location":"","page":"Home","title":"Home","text":"with space-dependent capacity C(x) and diffusion and source terms that can also depend on the variable T. Only the specific case of no heat flux across the domain boundaries is considered which corresponds to the Neumann boundary condition","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracpartialpartial x T(a) = fracpartialpartial x T(b) = 0","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A SplineComplex object contains all necessary information about the spline spaces and collocations that are used. Let us create one with cubic splines from 11 knots on the domain -1 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DiffusionSplineFE\nusing OrdinaryDiffEq\n\nSC = SplineComplex((-1, 1), 11, 4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the problem, all three functions C D S have to be defined. Let us assume constand capacity and diffusion and the absence of sources or sinks","category":"page"},{"location":"","page":"Home","title":"Home","text":"C(x) = one(x)\nD(x) = 0.001 #scalar diffusivity\nS(x) = zero(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Initial spline coefficients are calculated from an initial codition","category":"page"},{"location":"","page":"Home","title":"Home","text":"T_init(x) = cos(π*x)\nu0 = initial_coefficients(SC, T_init)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we are ready to create the ODE problem that can be solved with any method in OrdinaryDiffEq.jl like Crank-Nicolson in this example","category":"page"},{"location":"","page":"Home","title":"Home","text":"tspan = (0, 100)\nprob = DiffusionProblem(SC, C, D, S, u0, tspan)\n\nsol = solve(prob, Trapezoid(autodiff=false), saveat=1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plotting recipes for Makie.jl can be used for visualization. Heatmaps or the custom diffusionplot for the full solution are available, as well as point based plotting for solutions at specific times.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CairoMakie\n\nfig, ax, lns = diffusionplot(SC, sol, 100)\nlines!(ax, SC, sol[1], color=:red, linestyle=:dash, linewidth=5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Diffusion plot) (Image: Diffusion heatmap)","category":"page"}]
}
