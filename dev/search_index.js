var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"#DiffusionSplineFE","page":"Home","title":"DiffusionSplineFE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DiffusionSplineFE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DiffusionSplineFE]","category":"page"},{"location":"#DiffusionSplineFE.SplineComplex","page":"Home","title":"DiffusionSplineFE.SplineComplex","text":"SplineComplex{T}\n\n1D B-Spline bases and collocation matrices\n\nInitialization\n\nBy knot sequence or domain interval and number of points\n\nSplineComplex(knots::Vector{T}, order::Int=4)\nSplineComplex(domain::Tuple=(-1.0, 1.0), n::Int=11, order::Int=4)\n\nFields\n\nB: Spline basis\nR: Recombined spline basis (satisfying Neumann boundary condition)\nξ: Greville points \nI₁: Collocation matrix of R\nI₂: Collocation matrix of B\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionSplineFE.DiffusionProblem-Union{Tuple{T}, Tuple{SplineComplex{T}, Function, Function, Function, Vector, Tuple}} where T","page":"Home","title":"DiffusionSplineFE.DiffusionProblem","text":"DiffusionProblem(SC::SplineComplex, C::Function, D::Function, S::Function, u0::Vector, tspan::Tuple)\n\nSet up OrdinaryDiffEq.ODEProblem for equation with only space-dependent capacity C, diffusion D, and source S.\n\nAlternative initialization with u0::Function instead of u0::Vector.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionSplineFE.GeneralDiffusionProblem-Union{Tuple{T}, Tuple{SplineComplex{T}, Function, Function, Function, Vector, Tuple}} where T","page":"Home","title":"DiffusionSplineFE.GeneralDiffusionProblem","text":"DiffusionProblem(SC::SplineComplex, C::Function, D::Function, S::Function, u0::Vector, tspan::Tuple)\n\nSet up OrdinaryDiffEq.ODEProblem for equation with space- and value-dependent diffusion D, and source S.\n\nAlternative initialization with u0::Function instead of u0::Vector.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionSplineFE._approximate_nonlinear!-Union{Tuple{T}, Tuple{Vector{T}, SplineComplex{T}, Function, Vector{T}}} where T","page":"Home","title":"DiffusionSplineFE._approximate_nonlinear!","text":"approximate_nonlinear!(d, SC::SplineComplex, f, a)\n\nFill preallocated coefficient vector, see also _approximate_nonlinear.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionSplineFE._approximate_nonlinear-Union{Tuple{T}, Tuple{SplineComplex{T}, Function, Vector{T}}} where T","page":"Home","title":"DiffusionSplineFE._approximate_nonlinear","text":"approximate_nonlinear(SC::SplineComplex, f, a)\n\nReturn coefficients for approximation of nonlinear function f(x, Tₕ(a)) in spline space B.\n\nThe approximation is based on interpolation at the Greville points.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionSplineFE._approximate_nonlinear-Union{Tuple{T}, Tuple{SplineComplex{T}, Function}} where T","page":"Home","title":"DiffusionSplineFE._approximate_nonlinear","text":"approximate_nonlinear(f, SC::SplineComplex)\n\nReturn coefficients for approximation of function f(x) in spline space B, see also _approximate_nonlinear.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionSplineFE._assemble_tensors-Union{Tuple{SplineComplex{T}}, Tuple{T}} where T","page":"Home","title":"DiffusionSplineFE._assemble_tensors","text":"_assemble_tensors(SC::SplineComplex)\n\nHelper function to compute all needed Galerkin tensors and matrices.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionSplineFE.initial_coefficients-Union{Tuple{T}, Tuple{SplineComplex{T}, Function}} where T","page":"Home","title":"DiffusionSplineFE.initial_coefficients","text":"initial_coefficients(SC::SplineComplex, f::Function)\n\nCompute coefficient vector of initial condition in recombined spline space R.\n\n\n\n\n\n","category":"method"}]
}
