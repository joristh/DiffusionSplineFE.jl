var documenterSearchIndex = {"docs":
[{"location":"details/","page":"Details","title":"Details","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"details/#Interface","page":"Details","title":"Interface","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"SplineComplex\ninitial_coefficients\nDiffusionProblem\nGeneralDiffusionProblem","category":"page"},{"location":"details/#DiffusionSplineFE.SplineComplex","page":"Details","title":"DiffusionSplineFE.SplineComplex","text":"SplineComplex{k, T}\n\n1D B-Spline bases (order k with numeric type T) and collocation matrices\n\nInitialization\n\nBy knot sequence or domain interval and number of points\n\nSplineComplex(knots::Vector{T}, order::Int=4)\nSplineComplex(domain::Tuple(T,T)=(-1.0, 1.0), n::Int=11, order::Int=4)\n\nFields\n\nB: Spline basis\nR: Recombined spline basis (satisfying Neumann boundary condition)\nξ: Greville points \nI₁: Collocation matrix of R\nI₂: Collocation matrix of B\n\n\n\n\n\n","category":"type"},{"location":"details/#DiffusionSplineFE.initial_coefficients","page":"Details","title":"DiffusionSplineFE.initial_coefficients","text":"initial_coefficients(SC::SplineComplex, f::Function)\n\nCompute coefficient vector of initial condition in recombined spline space R.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE.DiffusionProblem","page":"Details","title":"DiffusionSplineFE.DiffusionProblem","text":"DiffusionProblem(SC::SplineComplex, C::Function, D::Function, S::Function, u0::Vector, tspan::Tuple)\n\nSet up OrdinaryDiffEq.ODEProblem for equation with only space-dependent capacity C, diffusion D, and source S.\n\nAlternative initialization with u0::Function instead of u0::Vector.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE.GeneralDiffusionProblem","page":"Details","title":"DiffusionSplineFE.GeneralDiffusionProblem","text":"DiffusionProblem(SC::SplineComplex, C::Function, D::Function, S::Function, u0::Vector, tspan::Tuple)\n\nSet up OrdinaryDiffEq.ODEProblem for equation with space- and value-dependent diffusion D, and source S.\n\nAlternative initialization with u0::Function instead of u0::Vector.\n\n\n\n\n\n","category":"function"},{"location":"details/#Internals","page":"Details","title":"Internals","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"_approximate_nonlinear\n_approximate_nonlinear!\n_assemble_tensors","category":"page"},{"location":"details/#DiffusionSplineFE._approximate_nonlinear","page":"Details","title":"DiffusionSplineFE._approximate_nonlinear","text":"_approximate_nonlinear(SC::SplineComplex, f, a)\n\nReturn coefficients for approximation of nonlinear function f(x, Tₕ(a)) in spline space B.\n\nThe approximation is based on interpolation at the Greville points.\n\n\n\n\n\n_approximate_nonlinear(f, SC::SplineComplex)\n\nReturn coefficients for approximation of space-dependent function f(x) in spline space B.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE._approximate_nonlinear!","page":"Details","title":"DiffusionSplineFE._approximate_nonlinear!","text":"_approximate_nonlinear!(d, SC::SplineComplex, f, a)\n\nFill preallocated coefficient vector, see also _approximate_nonlinear.\n\n\n\n\n\n","category":"function"},{"location":"details/#DiffusionSplineFE._assemble_tensors","page":"Details","title":"DiffusionSplineFE._assemble_tensors","text":"_assemble_tensors(SC::SplineComplex)\n\nHelper function to compute all needed Galerkin tensors and matrices.\n\n\n\n\n\n","category":"function"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"examples/#Ghil-Sellers-Energy-Balance-Model","page":"Advanced Example","title":"Ghil-Sellers Energy Balance Model","text":"","category":"section"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"The entire code for this example can be found as a jupyter-notebook.","category":"page"},{"location":"examples/#Model","page":"Advanced Example","title":"Model","text":"","category":"section"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"The one-dimensional Ghil-Sellers energy balance model (Sellers1969, Ghil1976, Bdai2014) is given by the diffusion equation","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"beginalign*\n    c(x)T_t = left( frac2piright)^2 frac1cos(pi x2) leftcos(pi x2) k(xT)T_x)right_x + mu Q(x) left1 - alpha(x T)right - sigma T^4 left1 - m tanh(c_3T^6)right\nendalign*","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"where x = 2phipi in -1 1 with homogeneous Neumann boundary conditions and a prescribed initial condition. The diffusive term k(xT) is governed by eddy diffusivities for sensible and latent heat","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"beginalign*\n\tk(x T) = k_1(x) + k_2(x)g(T)\n\tg(T) = c_4T^2 exp(-c_5T)\nendalign*","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"The temperature- and latitude-dependent albedo is given by","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"beginalign*\n\talpha(x T) = left b(x) - c_1 T_m + min(T-c_2 z(x) - T_m 0) right_c\nendalign*","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"with the cutoff function","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"beginalign*\n\th_c = \n\tbegincases\n\t\th_min  h leq h_min\n\t\th  h_min  h  h_max\n\t\th_max  h_max leq h\n\tendcases\nendalign*","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"All parameters (constants and functions) are empirically found and interpolated values from the original paper by Sellers are used.","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"Multiplying with cos(pi x2), the energy balance model can be rewritten in general form which yields","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"beginalign*\n\tC(x) = cos(pi x2) c(x)\n\tD(x T) = left(frac2piright)^2 cos(pi x2) k(x T)\n\tS(x T) = cos(pi x2) left( mu Q(x) left1 - alpha(x T)right - sigma T^4 left1 - m tanh(c_3T^6)right right)\nendalign*","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"and solved with DiffusionSplineFE.jl.","category":"page"},{"location":"examples/#Results","page":"Advanced Example","title":"Results","text":"","category":"section"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"The figure shows equilibrium states for two close initial conditions. The ODEs are integrated until t_end = 3 cdot 10^9 with implicit Crank-Nicolson. Using fifth order explicit Runge-Kutta gives very similar results and the system does not show stiff behavior.","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"(Image: EBM_states.png)","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"In comparison to the finite difference implementation in GhilSellersEBM.jl there are no oscillations and instabilities when starting close to the separatrix between stable hot and cold states. At the same time, the Neumann boundary conditions are exactly fulfilled by use of a recombined spline space which is not true for the FD approach. Even with a very low dimensional spline space (n=11), the resulting behavior is qualitatively and quantitatively comparable to GhilSellersEBM.jl.","category":"page"},{"location":"examples/","page":"Advanced Example","title":"Advanced Example","text":"(Image: EBM_Comparison.gif)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DiffusionSplineFE","category":"page"},{"location":"#DiffusionSplineFE","page":"Home","title":"DiffusionSplineFE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DiffusionSplineFE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We are looking at the 1D nonlinear diffusion equation on the interval domain Omega = a b","category":"page"},{"location":"","page":"Home","title":"Home","text":"C(x)fracpartial Tpartial t = fracpartialpartial x left( D(x T) fracpartial Tpartial xright) + S(xT) quad x in Omega T in mathbbR","category":"page"},{"location":"","page":"Home","title":"Home","text":"with space-dependent capacity C(x) and diffusion and source terms that can also depend on the variable T. Only the specific case of no heat flux across the domain boundaries is considered which corresponds to the Neumann boundary condition","category":"page"},{"location":"","page":"Home","title":"Home","text":"fracpartialpartial x T(a) = fracpartialpartial x T(b) = 0","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A SplineComplex object contains all necessary information about the spline spaces and collocations that are used. Let us create one with cubic splines from 11 knots on the domain -1 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DiffusionSplineFE\nusing OrdinaryDiffEq\n\nSC = SplineComplex((-1, 1), 11, 4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the problem, all three functions C D S have to be defined. Let us assume constand capacity and diffusion and the absence of sources or sinks","category":"page"},{"location":"","page":"Home","title":"Home","text":"C(x) = one(x)\nD(x) = 0.002 #scalar diffusivity\nS(x) = zero(x)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Initial spline coefficients are calculated from an initial codition","category":"page"},{"location":"","page":"Home","title":"Home","text":"T_init(x) = cos(π*x)\nu0 = initial_coefficients(SC, T_init)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we are ready to create the ODE problem that can be solved with any method in OrdinaryDiffEq.jl like Crank-Nicolson in this example","category":"page"},{"location":"","page":"Home","title":"Home","text":"tspan = (0, 100)\nprob = DiffusionProblem(SC, C, D, S, u0, tspan)\n\nsol = solve(prob, Trapezoid(autodiff=false), saveat=1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plotting recipes for Makie.jl can be used for visualization. Heatmaps or the custom diffusionplot for the full solution are available, as well as point based plotting for solutions at specific times.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CairoMakie\n\nfig, ax, lns = diffusionplot(SC, sol, 100)\nlines!(ax, SC, sol[1], color=:red, linestyle=:dash, linewidth=5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Diffusion plot)","category":"page"},{"location":"","page":"Home","title":"Home","text":"heatmap(SC, sol)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Diffusion heatmap)","category":"page"}]
}
